#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024

void exit_shell(char *buffer);

int main(void)
{
    char *buffer = NULL;
    size_t bufsize = BUFFER_SIZE;
    ssize_t nread;
    pid_t pid;
    int status;

    while (1)
    {
        printf("$ ");
        buffer = (char *) malloc(bufsize * sizeof(char));
        if (buffer == NULL)
        {
            perror("Unable to allocate buffer");
            exit(1);
        }

        nread = getline(&buffer, &bufsize, stdin);
        if (nread == -1)
        {
            free(buffer);
            exit(0);
        }

        // Remove trailing newline character from input
        if (buffer[nread - 1] == '\n')
        {
            buffer[nread - 1] = '\0';
        }

        // Exit built-in command
        if (strcmp(buffer, "exit") == 0)
        {
            exit_shell(buffer);
        }

        pid = fork();

        if (pid == 0)
        {
            char *token;
            char *args[100];
            int i = 0;

            token = strtok(buffer, " ");

            while (token != NULL)
            {
                args[i] = token;
                token = strtok(NULL, " ");
                i++;
            }
            args[i] = NULL;

            execvp(args[0], args);
            perror("execvp");
            exit(EXIT_FAILURE);
        }
        else if (pid < 0)
        {
            perror("fork failed");
            exit(EXIT_FAILURE);
        }
        else
        {
            waitpid(pid, &status, 0);
        }

        free(buffer);
    }

    return 0;
}

void exit_shell(char *buffer)
{
    free(buffer);
    exit(0);
}
