#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define MAX_INPUT_LENGTH 1024
#define MAX_ARGS 64

/**
 * Function declarations
 */
void shell_loop(void);
char *read_input(void);
char **parse_input(char *input);
int execute_command(char **args);
void exit_shell(int status);

/**
 * Main function
 */
int main(void)
{
    shell_loop();
    return EXIT_SUCCESS;
}

/**
 * The main shell loop that reads and executes user commands
 */
void shell_loop(void)
{
    char *input;
    char **args;
    int status;

    do {
        printf("$ ");
        input = read_input();
        args = parse_input(input);
        status = execute_command(args);

        free(input);
        free(args);
    } while (status);
}

/**
 * Reads input from the user
 */
char *read_input(void)
{
    char *input = NULL;
    size_t bufsize = 0;

    getline(&input, &bufsize, stdin);

    return input;
}

/**
 * Parses the input string into an array of arguments
 */
char **parse_input(char *input)
{
    char **args = malloc(MAX_ARGS * sizeof(char *));
    char *arg;
    int i = 0;

    arg = strtok(input, " \t\r\n\a");
    while (arg != NULL && i < MAX_ARGS - 1) {
        args[i++] = arg;
        arg = strtok(NULL, " \t\r\n\a");
    }
    args[i] = NULL;

    return args;
}

/**
 * Executes the command specified by the arguments
 */
int execute_command(char **args)
{
    pid_t pid, wpid;
    int status;

    if (args[0] == NULL) {
        return 1;
    }

    if (strcmp(args[0], "exit") == 0) {
        if (args[1] != NULL) {
            exit_shell(atoi(args[1]));
        } else {
            exit_shell(EXIT_SUCCESS);
        }
    }

    pid = fork();
    if (pid == 0) {
        if (execvp(args[0], args) == -1) {
            perror("shell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        perror("shell");
    } else {
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }

    return 1;
}

/**
 * Exits the shell with the given status
 */
void exit_shell(int status)
{
    exit(status);
}
