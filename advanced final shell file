#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define BUFFER_SIZE 1024
#define MAX_ARGS 10

/**
 * split_args - Split a string into arguments
 * @input: Input string
 * @args: Array to store arguments
 *
 * Return: Number of arguments
 */
int split_args(char *input, char **args)
{
    int i = 0;
    char *token;

    token = strtok(input, " ");
    while (token != NULL)
    {
        args[i++] = token;
        token = strtok(NULL, " ");
    }
    args[i] = NULL;

    return i;
}

/**
 * execute_command - Execute a command
 * @args: Array of arguments
 * @envp: Array of environment variables
 *
 * Return: 0 on success, 1 on failure
 */
int execute_command(char **args, char **envp)
{
    pid_t child_pid;
    int status;

    child_pid = fork();
    if (child_pid == -1)
    {
        perror("fork");
        return 1;
    }
    else if (child_pid == 0)
    {
        /* Child process */
        if (execve(args[0], args, envp) == -1)
        {
            perror("execve");
            exit(EXIT_FAILURE);
        }
    }
    else
    {
        /* Parent process */
        waitpid(child_pid, &status, 0);
    }

    return 0;
}

/**
 * main - Entry point of the advanced_shell program
 *
 * Return: Always 0
 */
int main(void)
{
    char *buffer = NULL;
    size_t bufsize = 0;
    ssize_t n_read;
    char *args[MAX_ARGS];
    int num_args;

    while (1)
    {
        printf("$ ");
        n_read = getline(&buffer, &bufsize, stdin);
        if (n_read == -1)
        {
            if (feof(stdin))
            {
                printf("\n");
                exit(EXIT_SUCCESS);
            }
            else
            {
                perror("getline");
                exit(EXIT_FAILURE);
            }
        }

        buffer[strcspn(buffer, "\n")] = '\0';

        num_args = split_args(buffer, args);

        if (strcmp(args[0], "exit") == 0)
        {
            /* Exit command */
            printf("Goodbye!\n");
            exit(EXIT_SUCCESS);
        }
        else if (strcmp(args[0], "cd") == 0)
        {
            /* Change directory command */
            if (num_args == 1)
            {
                /* No arguments, go to home directory */
                if (chdir(getenv("HOME")) == -1)
                {
                    perror("chdir");
                }
            }
            else if (num_args == 2)
            {
                /* One argument, change to specified directory */
                if (chdir(args[1]) == -1)
                {
                    perror("chdir");
                }
            }
            else
            {
                printf("Usage: cd [directory]\n");
            }
        }
        else
        {
            /* Other commands */
            execute_command(args, environ);
        }
    }

    free(buffer);

    return 0;
}
