
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <sys/stat.h>

#define BUFFER_SIZE 1024
#define DELIMITER " \t\r\n\a"

/**
 * main - Entry point for the shell program
 *
 * Return: Always 0
 */
int main(void)
{
    char *input;        /* Pointer to input string */
    char *token;        /* Pointer to tokenized string */
    char *args[BUFFER_SIZE];    /* Array to store command and arguments */
    int status = 1;     /* Status flag for shell loop */

    while (status)
    {
        printf("($)");
        input = NULL;
        size_t bufsize = 0;
        getline(&input, &bufsize, stdin); // Read input from user

        token = strtok(input, DELIMITER); // Tokenize input
        int i = 0;
        while (token != NULL)
        {
            args[i++] = token;
            token = strtok(NULL, DELIMITER);
        }
        args[i] = NULL; // Null-terminate the args array

        if (args[0] == NULL) // If no command is given, skip to next iteration
            continue;

        if (strcmp(args[0], "exit") == 0)
        {
            status = 0;
            continue;
        }

        pid_t pid = fork(); // Fork a child process

        if (pid == 0) // Child process
        {
            if (execvp(args[0], args) == -1) // Execute the command
            {
                perror("Error");
                exit(EXIT_FAILURE);
            }
        }
        else if (pid > 0) // Parent process
        {
            waitpid(pid, &status, 0); // Wait for child process to complete
        }
        else // Forking failed
        {
            perror("Error");
            exit(EXIT_FAILURE);
        }

        free(input); // Free allocated memory
    }

    return 0;
}
