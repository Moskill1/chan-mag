#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define BUFSIZE 1024
#define DELIM " \t\r\n\a"
#define MAX_ARGS 64

extern char **environ;

/* Function declarations */
int shell_exec(char **args);
int shell_cd(char **args);
int shell_env(char **args);
char **shell_split_line(char *line);
void shell_loop(void);

/* List of built-in commands */
char *builtin_cmds[] = {
    "cd",
    "env"
};

/* List of corresponding functions for built-in commands */
int (*builtin_funcs[]) (char **) = {
    &shell_cd,
    &shell_env
};

/* Get the number of built-in commands */
int num_builtins() {
    return sizeof(builtin_cmds) / sizeof(char *);
}

/* Built-in command: change directory */
int shell_cd(char **args) {
    if (args[1] == NULL) {
        fprintf(stderr, "Expected argument to \"cd\"\n");
    } else {
        if (chdir(args[1]) != 0) {
            perror("Shell");
        }
    }
    return 1;
}

/* Built-in command: print environment */
int shell_env(char **args) {
    char **env = environ;
    while (*env != NULL) {
        printf("%s\n", *env);
        env++;
    }
    return 1;
}

/* Execute shell command */
int shell_exec(char **args) {
    pid_t pid;
    int status;

    pid = fork();
    if (pid == 0) {
        /* Child process */
        if (execvp(args[0], args) == -1) {
            perror("Shell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        /* Error forking */
        perror("Shell");
    } else {
        /* Parent process */
        do {
            waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }

    return 1;
}

/* Split input line into arguments */
char **shell_split_line(char *line) {
    int bufsize = MAX_ARGS, position = 0;
    char **tokens = malloc(bufsize * sizeof(char *));
    char *token;

    if (!tokens) {
        fprintf(stderr, "Shell: allocation error\n");
        exit(EXIT_FAILURE);
    }

    token = strtok(line, DELIM);
    while (token != NULL) {
        tokens[position] = token;
        position++;

        if (position >= bufsize) {
            bufsize += MAX_ARGS;
            tokens = realloc(tokens, bufsize * sizeof(char *));
            if (!tokens) {
                fprintf(stderr, "Shell: allocation error\n");
                exit(EXIT_FAILURE);
            }
        }

        token = strtok(NULL, DELIM);
    }
    tokens[position] = NULL;
    return tokens;
}

/* Main shell loop */
void shell_loop(void) {
    char *line;
    char **args;
    int status;

    do {
        printf("$ ");
        line = NULL;
        ssize_t bufsize = 0;
        getline(&line, &bufsize, stdin);
        args = shell_split_line(line);
        status = shell_exec(args);

        free(line);
        free(args);
    } while (status);
}

/* Main function */
int main(int argc, char **argv) {
    shell_loop();
    return EXIT_SUCCESS;
}
